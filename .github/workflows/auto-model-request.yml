name: Auto Model Request

on:
  issues:
    types: [opened]

jobs:
  process-model-request:
    name: Process Model Request
    # Only run this workflow when the issue title starts with "REQUEST "
    if: startsWith(github.event.issue.title, 'REQUEST ')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install huggingface_hub requests pyyaml

      - name: Extract model name from issue title
        id: extract-model
        run: |
          MODEL_NAME=$(echo "${{ github.event.issue.title }}" | sed -n 's/REQUEST \(.*\)/\1/p')
          echo "MODEL_NAME=$MODEL_NAME" >> $GITHUB_ENV
          
          # Split the model name to get provider and model id
          PROVIDER_NAME=$(echo $MODEL_NAME | cut -d'/' -f1)
          MODEL_ID=$(echo $MODEL_NAME | cut -d'/' -f2)
          
          # Generate a safe model id for the file system
          SAFE_MODEL_ID=$(echo $MODEL_ID | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]-' '-')
          
          echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
          echo "MODEL_ID=$SAFE_MODEL_ID" >> $GITHUB_ENV
          
          # Create a branch name
          BRANCH_NAME="auto-add-model-$(date +%s)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
      - name: Create new branch
        run: git checkout -b ${{ env.BRANCH_NAME }}
        
      - name: Collect provider information
        run: |
          cat > collect_providers.py << 'EOF'
          import os
          import yaml
          import json
          import glob
          
          def collect_providers_info():
              """
              Collect provider information, icons, and links from existing model metadata files.
              """
              providers_info = {}
              model_mappings = {}
              
              # Find all metadata.yaml files
              metadata_files = glob.glob("models/**/metadata.yaml", recursive=True)
              print(f"Found {len(metadata_files)} metadata files")
              
              for file_path in metadata_files:
                  try:
                      with open(file_path, 'r', encoding='utf-8') as f:
                          metadata = yaml.safe_load(f)
                          
                      if not metadata:
                          print(f"Warning: Empty metadata file: {file_path}")
                          continue
                      
                      # Extract provider information
                      provider_id = metadata.get('spec', {}).get('descriptor', {}).get('provider', {}).get('id')
                      provider_name = metadata.get('spec', {}).get('descriptor', {}).get('provider', {}).get('name', {})
                      icon = metadata.get('spec', {}).get('descriptor', {}).get('icon', {})
                      links = metadata.get('spec', {}).get('descriptor', {}).get('links', [])
                      
                      # Get model sources
                      hf_name = metadata.get('spec', {}).get('source', {}).get('huggingface', {}).get('name')
                      
                      # Determine model name for mapping
                      if hf_name:
                          parts = hf_name.split('/')
                          if len(parts) == 2:
                              model_org, model_name = parts
                              
                              # Record the mapping from huggingface org to provider id
                              org_key = model_org.lower()
                              model_mappings[org_key] = provider_id
                      
                      if provider_id:
                          # Initialize provider entry if it doesn't exist
                          if provider_id not in providers_info:
                              providers_info[provider_id] = {
                                  'icon': '',
                                  'links': [],
                                  'name': {'enUS': '', 'zhCN': ''}
                              }
                          
                          # Update provider info if not already set
                          if not providers_info[provider_id]['icon'] and icon.get('src'):
                              providers_info[provider_id]['icon'] = icon['src']
                          
                          if not providers_info[provider_id]['links'] and links:
                              providers_info[provider_id]['links'] = links
                          
                          if not providers_info[provider_id]['name']['enUS'] and provider_name.get('enUS'):
                              providers_info[provider_id]['name'] = provider_name
                  
                  except Exception as e:
                      print(f"Error processing {file_path}: {str(e)}")
              
              # Compile the final result
              result = {
                  'providers': providers_info,
                  'mappings': model_mappings
              }
              
              return result
          
          if __name__ == "__main__":
              providers_info = collect_providers_info()
              
              # Save to JSON file
              with open('providers_info.json', 'w', encoding='utf-8') as f:
                  json.dump(providers_info, f, indent=2, ensure_ascii=False)
              
              print("Provider information saved to providers_info.json")
          EOF
          
          python collect_providers.py

      - name: Generate metadata file
        run: |
          mkdir -p models/$(echo ${{ env.PROVIDER_NAME }} | tr '[:upper:]' '[:lower:]')/${{ env.MODEL_ID }}
          
          cat > generate_metadata.py << 'EOF'
          import os
          import yaml
          import json
          import requests
          import re
          from huggingface_hub import HfApi

          def get_readme_content(model_name):
              """
              Try to get the README.md content from the Hugging Face model repository.
              """
              print(f"Attempting to fetch README for {model_name}")
              
              try:
                  # Try to directly get the README content from the repository
                  readme_url = f"https://huggingface.co/{model_name}/raw/main/README.md"
                  response = requests.get(readme_url, timeout=10)
                  
                  if response.status_code == 200:
                      return response.text
                  
                  # If that fails, try alternate filenames
                  for filename in ["README.md", "readme.md", "Readme.md", "README", "readme"]:
                      try:
                          readme_url = f"https://huggingface.co/{model_name}/raw/main/{filename}"
                          response = requests.get(readme_url, timeout=10)
                          if response.status_code == 200:
                              return response.text
                      except Exception:
                          continue
                  
                  # Try the API to get the card data
                  api_url = f"https://huggingface.co/api/models/{model_name}"
                  response = requests.get(api_url, timeout=10)
                  if response.status_code == 200:
                      card_data = response.json()
                      if "cardData" in card_data and card_data["cardData"]:
                          return card_data["cardData"]
                      
                  return ""
              except Exception as e:
                  print(f"Error fetching README content: {e}")
                  return ""

          def generate_description_from_readme(readme_content, model_name, max_length=500):
              """
              Generate a concise description from the README content.
              This is a simple extraction method that grabs the first few paragraphs.
              
              In a production environment, you'd use an LLM API like OpenAI to generate a better summary.
              """
              
              if not readme_content:
                  return f"A large language model from {model_name.split('/')[0]}."
              
              # Remove HTML tags and URLs
              readme_content = re.sub(r'<[^<]+?>', ' ', readme_content)  # Remove HTML tags
              readme_content = re.sub(r'http[s]?://\S+', ' ', readme_content)  # Remove URLs
              readme_content = re.sub(r'\[.*?\]\(.*?\)', ' ', readme_content)  # Remove markdown links
              readme_content = re.sub(r'!\[.*?\]\(.*?\)', ' ', readme_content)  # Remove markdown images
              
              # Remove license information and other common non-description content
              readme_content = re.sub(r'license_link:.*', '', readme_content)
              readme_content = re.sub(r'License:.*', '', readme_content)
              
              # Simple extraction of the first few paragraphs without code blocks
              paragraphs = []
              in_code_block = False
              
              for line in readme_content.split('\n'):
                  # Skip code blocks and tables
                  if '```' in line:
                      in_code_block = not in_code_block
                      continue
                  if in_code_block or line.startswith('|') or '---' in line:
                      continue
                      
                  # Skip headers, badges, and empty lines
                  if (line.strip().startswith('#') or 
                      '![' in line or 
                      line.strip() == '' or
                      'badge' in line.lower()):
                      continue
                      
                  # Clean the line of any remaining markdown artifacts
                  line = line.strip()
                  line = re.sub(r'[*_`]', '', line)  # Remove markdown formatting
                  
                  # Keep paragraphs of text that are reasonably sized and don't look like metadata
                  if len(line) > 30 and not re.match(r'^[A-Za-z]+:\s', line) and line not in paragraphs:
                      paragraphs.append(line)
                      
                  # If we have enough content, stop
                  description = ' '.join(paragraphs)
                  if len(description) >= max_length:
                      break
              
              # If we have a description, format it and return
              if paragraphs:
                  description = ' '.join(paragraphs)
                  # Clean up any extra whitespace
                  description = re.sub(r'\s+', ' ', description).strip()
                  if len(description) > max_length:
                      # Try to break at a sentence boundary
                      sentences = re.split(r'(?<=[.!?])\s+', description[:max_length+30])
                      if len(sentences) > 1:
                          description = ' '.join(sentences[:-1])
                      else:
                          description = description[:max_length] + '...'
                  return description
              else:
                  # Fallback
                  return f"A large language model from {model_name.split('/')[0]}."

          def get_model_info_from_huggingface(model_name):
              print(f"Fetching info for {model_name} from Hugging Face")
              
              try:
                  api = HfApi()
                  description = ""
                  tags = ["TEXT_GENERATION"]  # Default tag
                  
                  # Try to get the model info directly
                  try:
                      model_info = api.model_info(model_name)
                      
                      # Extract tags
                      if model_info.tags:
                          # Filter to valid tags
                          valid_tags = ["TEXT_GENERATION", "VIDEO_TO_TEXT", "TEXT_TO_VIDEO", 
                                      "IMAGE_TO_IMAGE", "IMAGE_TO_TEXT", "TEXT_TO_IMAGE", 
                                      "EMBEDDING", "RERANK_MODEL", "AUDIO_TO_AUDIO", "AUDIO_TO_TEXT"]
                          tags = [tag for tag in model_info.tags if tag in valid_tags]
                          if not tags:
                              tags = ["TEXT_GENERATION"]  # Default if no valid tags
                      
                      # Do NOT use model_info.description directly as it might be a Python object
                  except Exception as e:
                      print(f"Error fetching model directly: {e}")
                  
                  # Try to get README content as our primary source of description
                  readme_content = get_readme_content(model_name)
                  if readme_content:
                      description = generate_description_from_readme(readme_content, model_name)
                  
                  # Ensure we have some description, even if minimal
                  if not description:
                      description = f"A large language model from {model_name.split('/')[0]}."
                      
                  # Make sure description is a string, not an object
                  if not isinstance(description, str):
                      description = f"A large language model from {model_name.split('/')[0]}."
                      
                  return {
                      "description": description,
                      "tags": tags
                  }
                      
              except Exception as e:
                  print(f"Error fetching model info: {e}")
                  return {
                      "description": f"A large language model from {model_name.split('/')[0]}.",
                      "tags": ["TEXT_GENERATION"]  # Default tag
                  }

          def format_description(description):
              # Format the description for both English and Chinese
              return {
                  "enUS": description,
                  "zhCN": description  # In a real implementation, you would use translation API
              }
              
          def get_provider_mapping(model_org):
              """Get provider ID from the organization name using collected mappings"""
              try:
                  with open('providers_info.json', 'r', encoding='utf-8') as f:
                      providers_info = json.load(f)
                  
                  mappings = providers_info.get('mappings', {})
                  org_key = model_org.lower()
                  
                  if org_key in mappings:
                      return mappings[org_key]
              except Exception as e:
                  print(f"Error reading provider mappings: {e}")
              
              return model_org.lower()

          def get_provider_info(provider_id):
              """Get provider information from the collected providers data"""
              try:
                  with open('providers_info.json', 'r', encoding='utf-8') as f:
                      providers_info = json.load(f)
                  
                  providers = providers_info.get('providers', {})
                  if provider_id in providers:
                      return providers[provider_id]
              except Exception as e:
                  print(f"Error reading provider info: {e}")
              
              return {
                  "icon": "",
                  "links": [],
                  "name": {"enUS": provider_id.capitalize(), "zhCN": provider_id.capitalize()}
              }
              
          def create_metadata_yaml(model_name, output_path):
              # Extract provider and model ID from the model name
              parts = model_name.split('/')
              if len(parts) != 2:
                  raise ValueError(f"Invalid model name format: {model_name}, expected format: provider/model-id")
                  
              model_org = parts[0]
              model_id = parts[1].lower().replace('.', '-')
              
              # Get model info from Hugging Face
              model_info = get_model_info_from_huggingface(model_name)
              
              # Get provider information from mappings
              provider_id = get_provider_mapping(model_org)
              provider_info = get_provider_info(provider_id)
              
              # Create the metadata structure
              metadata = {
                  "apiVersion": "model.hydra.io/v1alpha1",
                  "kind": "ModelSpec",
                  "metadata": {
                      "name": model_id
                  },
                  "spec": {
                      "deployments": [
                          {
                              "customRuntimeArgs": [],
                              "resourceRequirements": {
                                  "cpu": 8,
                                  "gpuCount": 8,
                                  "gpuType": "nvidia-vgpu",
                                  "memory": 640,
                                  "perGPUMemoryGB": 80
                              },
                              "runtime": "vllm",
                              "versionRequired": ">=0.8.5"
                          }
                      ],
                      "descriptor": {
                          "description": format_description(model_info["description"]),
                          "display": model_name.split('/')[-1],
                          "icon": {
                              "src": provider_info.get("icon") or f"https://public-resources.d.run/models/logos/{provider_id.lower()}-model-logo.svg",
                              "type": "image/svg"
                          },
                          "links": provider_info.get("links") or [
                              {
                                  "description": "About",
                                  "url": f"https://github.com/{model_org}"
                              }
                          ],
                          "provider": {
                              "id": provider_id,
                              "name": provider_info.get("name") or {
                                  "enUS": model_org,
                                  "zhCN": model_org
                              }
                          },
                          "tags": model_info["tags"] if model_info["tags"] else ["TEXT_GENERATION"]
                      },
                      "source": {
                          "huggingface": {
                              "name": model_name
                          },
                          "modelscope": {
                              "name": model_name
                          }
                      }
                  }
              }
              
              # Write the metadata to a YAML file
              os.makedirs(os.path.dirname(output_path), exist_ok=True)
              with open(output_path, 'w', encoding='utf-8') as f:
                  yaml.dump(metadata, f, allow_unicode=True, sort_keys=False)
              
              return output_path

          if __name__ == "__main__":
              import sys
              
              model_name = os.environ.get("MODEL_NAME")
              provider_name = os.environ.get("PROVIDER_NAME", "").lower()
              model_id = os.environ.get("MODEL_ID", "").lower()
              
              if not model_name:
                  print("MODEL_NAME environment variable is required")
                  sys.exit(1)
                  
              output_path = f"models/{provider_name}/{model_id}/metadata.yaml"
              create_metadata_yaml(model_name, output_path)
              print(f"Metadata file created at {output_path}")
          EOF
          
          python generate_metadata.py
          
      - name: Clean up
        run: |
          # Remove temporary files to prevent them from being staged
          rm -f collect_providers.py
          rm -f providers_info.json
          rm -f generate_metadata.py
        
          
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Only add the metadata.yaml file that we generated
          git add "models/*.yaml"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit the changes
          git commit -m "Add metadata for ${{ env.MODEL_NAME }}"
          
          # Push the changes
          git push --set-upstream origin ${{ env.BRANCH_NAME }}

      - name: Create pull request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              owner,
              repo,
              title: `Add metadata for ${{ env.MODEL_NAME }}`,
              body: `This PR was automatically generated in response to issue #${{ github.event.issue.number }}: REQUEST ${{ env.MODEL_NAME }}\n\nThe metadata file was automatically generated based on information from Hugging Face.\nPlease review the changes and make any necessary adjustments before merging.`,
              head: '${{ env.BRANCH_NAME }}',
              base: 'main'
            });
            
            // Set output
            core.setOutput('pull-request-number', result.data.number);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['automated-pr', 'model-request']
            });
          
      - name: Comment on the issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Thank you for your model request!
            
            I've automatically generated metadata for the model `${{ env.MODEL_NAME }}` and created a pull request #${{ steps.create-pr.outputs.pull-request-number }}.
            
            Once the PR is approved and merged, the model will be available in the modelhub.
